{
  "name": "i18n Tagged Template Literals",
  "tagline": "ES2015 template literal tag for i18n and l10n translation and localization",
  "body": "# i18n Tagged Template Literals [![Build Status](https://img.shields.io/travis/skolmer/es2015-i18n-tag/master.svg?style=flat)](https://travis-ci.org/skolmer/es2015-i18n-tag) [![npm version](https://img.shields.io/npm/v/es2015-i18n-tag.svg?style=flat)](https://www.npmjs.com/package/es2015-i18n-tag)\r\n[![NPM](https://nodei.co/npm/es2015-i18n-tag.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/es2015-i18n-tag/)\r\n\r\n![i18n Tagged Template Literals](images/es2015-i18n-tag-icon-big.jpg)\r\n\r\n## Overview\r\n\r\nThis template literal tag adds support for i18n and l10n translation and localization to your JavaSript project.\r\n\r\n* Very small footprint ![Common JS Module](https://badges.herokuapp.com/size/npm/es2015-i18n-tag/dist/lib/index.js?label=common%20js%20module) ![Minified + gzip](https://badges.herokuapp.com/size/npm/es2015-i18n-tag/dist/lib/index.umd.min.js?label=minified%20%2B%20gzip&gzip=true)\r\n* Powerful [ES2015 standard template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals) syntax\r\n* Internationalization based on [ECMA-402](http://www.ecma-international.org/ecma-402/2.0/) standard [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) browser API\r\n\r\n## Features\r\n\r\n* Translate and internationalize your JavaScript project\r\n* Translate your JavaScript library at [buildtime](#build-time-translation)\r\n* Generate a [schema](#json-schema) of all i18n tagged template literals in your project for easy JSON based translations\r\n\r\n## Compatibility\r\n\r\nThis library is using the ECMAScript Internationalization API. All modern browsers, [except safari](https://www.safari-is-the-new-ie.com), have implemented this API. Safari Support can be added with Andy Earnshaw's excellent Intl.js polyfill\r\n* [Intl Browser Support](http://caniuse.com/#search=Intl)\r\n* [Intl Polyfill](https://github.com/andyearnshaw/Intl.js)\r\n\r\n## Examples\r\n\r\n* [JS Bin Playground](https://jsbin.com/rojilu/edit?js,output)\r\n* [React/webpack](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS)\r\n* [jQuery/gulp](https://github.com/skolmer/i18n-tag-examples/tree/master/Simple)\r\n\r\n## Installation\r\n```sh\r\n$ npm install es2015-i18n-tag --save\r\n```\r\n\r\n## Usage\r\n\r\nThis library is avaliable as CommonJS module and as UMD module that is consumable in CommonJS, AMD and with script tags. \r\nThe UMD module is primarily for [online JS playgrounds](https://jsbin.com/rojilu/edit?html,js,output). It is highly recommended to use es2015-i18n-tag as CommonJS module with babel and [webpack](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS) or [browserify](https://github.com/skolmer/i18n-tag-examples/tree/master/Simple) or in a [Node app with Intl Polyfill](https://github.com/andyearnshaw/Intl.js#intljs-and-node).\r\n\r\n### UMD module on unpkg.com\r\n\r\n`https://unpkg.com/es2015-i18n-tag/dist/lib/index.umd.min.js`\r\n\r\n### Import and Configuration\r\n```js   \r\nimport i18n, { i18nConfig }  from 'es2015-i18n-tag'\r\n\r\ni18nConfig({\r\n    locales: 'de-DE',    \r\n    translations: {\r\n        \"Hello ${0}, you have ${1} in your bank account.\": \"Hallo ${0}, Sie haben ${1} auf Ihrem Bankkonto.\"\r\n    },\r\n    number: {      \r\n        [...options] // Intl NumberFormat options as described here: https://goo.gl/pDwbG2\r\n    },\r\n    date: {\r\n        [...options] // Intl DateTimeFormat options as described here: https://goo.gl/lslekB\r\n    }\r\n})\r\n\r\nconst name = 'Steffen'\r\nconst amount = 1250.33\r\n      \r\nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c in your bank account.`)\r\n// Hallo Steffen, Sie haben US$ 1,250.33 auf Ihrem Bankkonto.\r\n```\r\n\r\n### Currency formatting\r\n```js  \r\ni18nConfig({\r\n    number: { \r\n        currency: 'EUR'\r\n    }\r\n})\r\n\r\nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c in your bank account.`)\r\n// Hallo Steffen, Sie haben € 1,250.33 auf Ihrem Bankkonto.\r\n\r\nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c(USD) in your bank account.`)\r\n// Hallo Steffen, Sie haben US$ 1,250.33 auf Ihrem Bankkonto.\r\n```\r\n\r\n### Date formatting\r\n```js\r\ni18nConfig({\r\n    locales: 'en-US',\r\n    date: { \r\n        hour12: false \r\n    }\r\n})\r\n\r\nconsole.log(i18n`Hello ${name}, the date is ${new Date(2012, 11, 20, 19, 0, 0)}:t.`)\r\n// Hello Steffen, the date is 12/20/2012, 19:00:00.\r\n```\r\n#### Standard format strings\r\n\r\n```js\r\nconst date = new Date(2012, 11, 20, 19, 0, 0);\r\n\r\ni18n`The date is ${date}:t(D).`\r\n\r\n// The date is Thursday, December 20, 2012.\r\n```\r\n\r\nThe following standard format strings can be applied to a template expression of type [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\r\n\r\n\r\n| Format specifier | Description                             | Examples                                |\r\n|------------------|-----------------------------------------|-----------------------------------------|\r\n| \"d\"              | Short date pattern.                     | 12/20/2012                              |\r\n| \"D\"              | Long date pattern.                      | Thursday, December 20, 2012             |\r\n| \"f\"              | Full date/time pattern (short time).    | Thursday, December 20, 2012, 7:00 PM    |\r\n| \"F\"              | Full date/time pattern (long time).     | Thursday, December 20, 2012, 7:00:00 PM |\r\n| \"g\"              | General date/time pattern (short time). | 12/20/2012, 7:00 PM                     |\r\n| \"G\"              | General date/time pattern (long time).  | 12/20/2012, 7:00:00 PM                  |\r\n| \"M\", \"m\"         | Month/day pattern.                      | December 20                             |\r\n| \"O\", \"o\"         | ISO 8601 pattern.                       | 2012-12-20T18:00:00.000Z                |\r\n| \"R\", \"r\"         | RFC 1123 pattern.                       | Thu, 20 Dec 2012 18:00:00 GMT           |\r\n| \"t\"              | Short time pattern.                     | 7:00 PM                                 |\r\n| \"T\"              | Long time pattern.                      | 7:00:00 PM                              |\r\n| \"Y\", \"y\"         | Year month pattern.                     | December 2012                           |\r\n\r\n### Percentage formatting\r\n```js       \r\nconsole.log(i18n`Hello ${name}, the percentage is ${0.01}:p.`)\r\n// Hello Steffen, the percentage is 1%.\r\n\r\ni18nConfig({\r\n    locales: 'de-DE'\r\n})\r\nconsole.log(i18n`Hello ${name}, the percentage is ${0.01}:p.`)\r\n// Hello Steffen, the percentage is 1 %.\r\n```\r\n\r\n### Number formatting\r\n```js   \r\nconsole.log(i18n`Hello ${name}, the number is ${12345.678}:n(2).`)\r\n// Hello Steffen, the number is 12,345.67.\r\n\r\ni18nConfig({\r\n    locales: 'de-DE'\r\n})\r\nconsole.log(i18n`Hello ${name}, the number is ${12345.678}:n(2).`)\r\n// Hello Steffen, the number is 12.345,67.\r\n```\r\n\r\n### Pluralization\r\n\r\nYou can use [nested templates](#nested-templates) for pluralization as shown in this [example](https://jsbin.com/zubugedeja/edit?js,output)\r\n\r\n### Nested templates\r\n```js\r\nlet hello = [\r\n    { name: \"Steffen\", percentage: 0.2 },\r\n    { name: \"Jack\", percentage: 0.8 }\r\n]\r\n        \r\nconsole.log(i18n`\r\n    <users>\r\n    ${hello.map((item) => i18n`\r\n        <user name=\"${item.name}\">${item.percentage}:p</user>\r\n    `).join('')}\r\n    </users>\r\n`)\r\n// <users>\r\n// \r\n//     <user name=\"Steffen\">20%</user>\r\n// \r\n//     <user name=\"Jack\">80%</user>\r\n// \r\n// </users>\r\n```\r\n> **NOTE:** For easy translation of multiline template literals use one of the following [json schema generators](#json-schema)\r\n\r\n### Standard format strings\r\n\r\nYou can add custom standard formatters similar to the predefined DateTime formatters. Valid types are date, number and string.\r\n```js\r\ni18nConfig({\r\n    standardFormatters: {\r\n        number: {\r\n            x: (locales, numberOptions, value) => value.toLocaleString(locales, Object.assign({}, numberOptions, { style: 'percent' }))\r\n        }\r\n    }\r\n})\r\n\r\nconsole.log(i18n`${0.77}:n(x)`)\r\n// 77%\r\n```\r\n### Translation Groups\r\n\r\nTranslation groups can be very useful to group translations by context. It can also be useful to avoid key duplicates in larger projects.\r\nYou can use [babel-plugin-i18n-tag-translate](https://github.com/skolmer/babel-plugin-i18n-tag-translate) to inject the relative path of your module as group name. Babel will inject `const __translationGroup = 'relative/path/to/module.ext'` into each module\r\n\r\n#### Babel generated file module groups\r\n\r\n[Example](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS)\r\n\r\n##### .babelrc\r\n```json\r\n{\r\n  \"plugins\": [\r\n    [\"i18n-tag-translate\", {\r\n      \"groupDir\": \"./src\"\r\n    }]\r\n  ]\r\n}\r\n```\r\n##### Project Structure\r\n```\r\n.\r\n├── src\r\n|   └── components\r\n|       ├── App.js\r\n|       └── Clock.js\r\n├── .babelrc\r\n```\r\n##### translations.de.json\r\n```json\r\n{\r\n    \"components/App.js\": {\r\n        \"Welcome\": \"Willkommen\"\r\n    },\r\n    \"components/Clock.js\": {\r\n        \"Time\": \"Zeit\"\r\n    }\r\n}\r\n```\r\n##### App.js\r\n```js\r\ni18n(__translationGroup)`Welcome` // Select translation from module group e.g. \"components/App.js\"\r\ni18n('components/Clock.js')`Time` // Select translation from a custom group\r\n```\r\n###### translation group class decorator\r\n```js\r\nimport { i18nGroup } from 'es2015-i18n-tag'\r\n\r\n/* default syntax */\r\nclass Clock {\r\n    tick() {\r\n        return this.i18n`Time: ${new Date()}:t(T)`\r\n    }\r\n}\r\nexport default i18nGroup(__translationGroup)(Clock)\r\n\r\n\r\n/* experimental class decorator syntax */\r\n@i18nGroup(__translationGroup)\r\nclass Clock {\r\n    tick() {\r\n        return this.i18n`Time: ${new Date()}:t(T)`\r\n    }\r\n}\r\nexport default Clock\r\n```\r\n\r\n## Tools\r\n\r\n### Build time translation\r\n* [babel-plugin-i18n-tag-translate](https://github.com/skolmer/babel-plugin-i18n-tag-translate): Translate your template literals at build time. [![npm version](https://img.shields.io/npm/v/babel-plugin-i18n-tag-translate.svg?style=flat)](https://www.npmjs.com/package/babel-plugin-i18n-tag-translate)\r\n\r\n### JSON Schema\r\n* [i18n-tag-schema](https://github.com/skolmer/i18n-tag-schema): Generates a JSON schema based on all i18n tagged literals in your project. [![npm version](https://img.shields.io/npm/v/i18n-tag-schema.svg?style=flat)](https://www.npmjs.com/package/i18n-tag-schema)\r\n* [vscode-18n-tag-schema](https://github.com/skolmer/vscode-i18n-tag-schema): Visual Studio Code Extension to generate a JSON schema. [![Marketplace Version](https://vsmarketplacebadge.apphb.com/version-short/skolmer.vscode-i18n-tag-schema.svg)](https://marketplace.visualstudio.com/items?itemName=skolmer.vscode-i18n-tag-schema)\r\n\r\n## Credits\r\n\r\nThanks to [Jack Hsu](https://github.com/jaysoo) for his initial draft of an [i18n template literal](http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/)\r\n\r\n## License\r\n\r\nCopyright (c) 2016 Steffen Kolmer\r\n\r\nThis software is licensed under the MIT license.  See the `LICENSE` file\r\naccompanying this software for terms of use.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}